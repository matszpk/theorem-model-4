# Simple 4-bit CPU
# cell_len_bits: 8, address_len: 10
# Registers:
#  A - accumlator (8-bit)
#  S - stack pointer (8-bit)
#  F - flags (3 - N, 2 - V, 1 - Z, 0 - C)
#  PC - program counter (12-bit)
# Instruction set:
# 0 - LDA - load into accumulator
# 1 - STA - store accumulator
# 2 - ADC - add to accumulator (A + M + C)
# 3 - SBC - subtract from accumulator (A - NOT(M) +C)
# 4 - AND - perform bitwise AND on accumulator
# 5 - OR - perform bitwise OR on accumulator
# 6 - XOR - perform bitwise XOR on accumulator
# 7 - CLC
# 8 - ROL - rotate left 1 bit including C.
# 9 - ROR - rotate right 1 bit including C.
# A - BCC - branch if C=0
# B - BNE - branch if Z=0
# C - BVC - branch if V=0
# D - BPL - branch if N=0
# E - SPC: mem: 0bxxxxxxx0 - create, 0bxxxxxxx1 - stop
# F - SEC
# phases:
# 0 - instruction fetch
# 1 - fetch memory argument
# 2 - load memory argument from memory
# 3 - execute instruction
main:
    alias cpu_phase_0 i0
    alias cpu_phase_1 i1
    alias cpu_instr_0 i2
    alias cpu_instr_1 i3
    alias cpu_instr_2 i4
    alias cpu_instr_3 i5
    alias cpu_tmp_0 i6
    alias cpu_tmp_1 i7
    alias cpu_tmp_2 i8
    alias cpu_tmp_3 i9
    alias cpu_acc_0 i10
    alias cpu_acc_1 i11
    alias cpu_acc_2 i12
    alias cpu_acc_3 i13
    alias cpu_acc_4 i14
    alias cpu_acc_5 i15
    alias cpu_acc_6 i16
    alias cpu_acc_7 i17
    alias cpu_flag_c i18
    alias cpu_flag_z i19
    alias cpu_flag_v i20
    alias cpu_flag_n i21
    alias cpu_pc_0 i22
    alias cpu_pc_1 i23
    alias cpu_pc_2 i24
    alias cpu_pc_3 i25
    alias cpu_pc_4 i26
    alias cpu_pc_5 i27
    alias cpu_pc_6 i28
    alias cpu_pc_7 i29
    alias cpu_pc_8 i30
    alias cpu_pc_9 i31
    alias cpu_pc_10 i32
    alias cpu_pc_11 i33
    alias mem_value_0 i34
    alias mem_value_1 i35
    alias mem_value_2 i36
    alias mem_value_3 i37
    alias mem_value_4 i38
    alias mem_value_5 i39
    alias mem_value_6 i40
    alias mem_value_7 i41
    
    cpu_phase_0_ph01 cpu_phase_1_ph01 \
    cpu_instr_0_ph01 cpu_instr_1_ph01 cpu_instr_2_ph01 cpu_instr_3_ph01 \
    cpu_pc_0_ph01 cpu_pc_1_ph01 cpu_pc_2_ph01 cpu_pc_3_ph01 \
    cpu_pc_4_ph01 cpu_pc_5_ph01 cpu_pc_6_ph01 cpu_pc_7_ph01 \
    cpu_pc_8_ph01 cpu_pc_9_ph01 cpu_pc_10_ph01 cpu_pc_11_ph01 \
    cpu_tmp_0_ph01 cpu_tmp_1_ph01 cpu_tmp_2_ph01 cpu_tmp_3_ph01 \
    mem_address_0_ph01 mem_address_1_ph01 mem_address_2_ph01 mem_address_3_ph01 \
    mem_address_4_ph01 mem_address_5_ph01 mem_address_6_ph01 mem_address_7_ph01 \
    mem_address_8_ph01 mem_address_9_ph01 mem_address_10_ph01 mem_address_11_ph01 = \
        cpu_phase01 cpu_phase_0 :12:cpu_pc_0 :8:mem_value_0
    
    cpu_phase_0_ph23 cpu_phase_1_ph23 \
    cpu_acc_0_ph23 cpu_acc_1_ph23 cpu_acc_2_ph23 cpu_acc_3_ph23 \
    cpu_acc_4_ph23 cpu_acc_5_ph23 cpu_acc_6_ph23 cpu_acc_7_ph23 \
    cpu_flag_c_ph23 cpu_flag_z_ph23 cpu_flag_v_ph23 cpu_flag_n_ph23 \
    cpu_pc_0_ph23 cpu_pc_1_ph23 cpu_pc_2_ph23 cpu_pc_3_ph23 \
    cpu_pc_4_ph23 cpu_pc_5_ph23 cpu_pc_6_ph23 cpu_pc_7_ph23 \
    cpu_pc_8_ph23 cpu_pc_9_ph23 cpu_pc_10_ph23 cpu_pc_11_ph23 mem_rw_ph23 \
    mem_value_0_ph23 mem_value_1_ph23 mem_value_2_ph23 mem_value_3_ph23 \
    mem_value_4_ph23 mem_value_5_ph23 mem_value_6_ph23 mem_value_7_ph23 \
    mem_address_0_ph23 mem_address_1_ph23 mem_address_2_ph23 mem_address_3_ph23 \
    mem_address_4_ph23 mem_address_5_ph23 mem_address_6_ph23 mem_address_7_ph23 \
    mem_address_8_ph23 mem_address_9_ph23 mem_address_10_ph23 mem_address_11_ph23 \
    create_ph23 stop_ph23 = cpu_phase23 \
        cpu_phase_0 :40:cpu_instr_0
    
    zero = copy zero
    cpu_phase_1 = copy cpu_phase_1
    
    # merge all phases
    # cpu_phase_0, cpu_phase_1
    o0 = ite cpu_phase_1 cpu_phase_0_ph23 cpu_phase_0_ph01
    o1 = ite cpu_phase_1 cpu_phase_1_ph23 cpu_phase_1_ph01
    # cpu_instr_X
    o2 o3 o4 o5 = ite_4bit cpu_phase_1 :4:cpu_instr_0 :4:cpu_instr_0_ph01
    # cpu_tmp_X
    o6 o7 o8 o9 = ite_4bit cpu_phase_1 :4:cpu_tmp_0 :4:cpu_tmp_0_ph01
    # cpu_acc_X
    o10 o11 o12 o13 o14 o15 o16 o17 = ite_8bit cpu_phase_1 :8:cpu_acc_0_ph23 :8:cpu_acc_0
    # cpu_flag_X
    o18 o19 o20 o21 = ite_4bit cpu_phase_1 :4:cpu_flag_c_ph23 :4:cpu_flag_c
    # cpu_pc_X
    o22 o23 o24 o25 o26 o27 o28 o29 = ite_8bit cpu_phase_1 :8:cpu_pc_0_ph23 :8:cpu_pc_0_ph01
    o30 o31 o32 o33 = ite_4bit cpu_phase_1 :4:cpu_pc_8_ph23 :4:cpu_pc_8_ph01
    # mem_value_X
    o34 o35 o36 o37 o38 o39 o40 o41 = ite_8bit cpu_phase_1 :8:mem_value_0_ph23 .8:zero
    # mem_rw
    o42 = ite cpu_phase_1 mem_rw_ph23 zero
    # mem_address_X
    o43 o44 o45 o46 o47 o48 o49 o50 = ite_8bit cpu_phase_1 :8:mem_address_0_ph23 \
        :8:mem_address_0_ph01
    o51 o52 o53 o54 = ite_4bit cpu_phase_1 :4:mem_address_8_ph23 :4:mem_address_8_ph01
    # create
    o55 = ite cpu_phase_1 create_ph23 zero
    # stop
    o56 = ite cpu_phase_1 stop_ph23 zero


copy:
    empty 1
xor:
    n0 = nand i0 i0
    n1 = nand i1 i1
    t0 = nand i0 n1
    t1 = nand n0 i1
    o0 = nand t0 t1
xor_4bit:
    o0 = xor i0 i4
    o1 = xor i1 i5
    o2 = xor i2 i6
    o3 = xor i3 i7
and:
    t = nand i0 i1
    o0 = nand t t
and_4bit:
    o0 = and i0 i4
    o1 = and i1 i5
    o2 = and i2 i6
    o3 = and i3 i7
or:
    t0 = nand i0 i0
    t1 = nand i1 i1
    o0 = nand t0 t1
or_4bit:
    o0 = or i0 i4
    o1 = or i1 i5
    o2 = or i2 i6
    o3 = or i3 i7
and_3:
    t0 = and i0 i1
    o0 = and t0 i2
and_4:
    t0 = and i0 i1
    t1 = and i2 i3
    o0 = and t0 t1
or_4:
    t0 = or i0 i1
    t1 = or i2 i3
    o0 = or t0 t1
# if i0 then i1 else i2
ite:
    n0 = nand i0 i0
    t0 = nand i0 i1
    t1 = nand n0 i2
    o0 = nand t0 t1
ite_4bit:
    o0 = ite i0 i1 i5
    o1 = ite i0 i2 i6
    o2 = ite i0 i3 i7
    o3 = ite i0 i4 i8
ite_8bit:
    o0 o1 o2 o3 = ite_4bit i0 :4:i1 :4:i9
    o4 o5 o6 o7 = ite_4bit i0 :4:i5 :4:i13
copy_4bit:
    empty 4
copy_8bit:
    empty 8
copy_42bit:
    empty 42
not_4bit:
    o0 = nand i0 i0
    o1 = nand i1 i1
    o2 = nand i2 i2
    o3 = nand i3 i3
full_adder:
    s0 = xor i0 i1
    a0 = and i0 i1
    a1 = and s0 i2
    o0 = xor s0 i2
    o1 = or a0 a1
half_adder:
    o0 = xor i0 i1
    o1 = and i0 i1
half_suber:
    x = xor i0 i1
    o0 = nand x x
    o1 = or i0 i1
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_adder_4bit:
    s0 c0 = full_adder i1 i5 i0
    s1 c1 = full_adder i2 i6 c0
    s2 c2 = full_adder i3 i7 c1
    s3 c3 = full_adder i4 i8 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
# 4-bit subtractor with carry
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_suber_4bit:
    n0 n1 n2 n3 = not_4bit i5 i6 i7 i8
    s0 c0 = full_adder i1 n0 i0
    s1 c1 = full_adder i2 n1 c0
    s2 c2 = full_adder i3 n2 c1
    s3 c3 = full_adder i4 n3 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
carry_inc_4bit:
    s0 c0 = half_adder i1 i0
    s1 c1 = half_adder i2 c0
    s2 c2 = half_adder i3 c1
    s3 c3 = half_adder i4 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
dec_4bit:
    d0 c0 = half_suber i0 zero
    d1 c1 = half_suber i1 c0
    d2 c2 = half_suber i2 c1
    d3 c3 = half_suber i3 c2
    o0 o1 o2 o3 = copy_4bit d0 d1 d2 d3
inc_12bit:
    one = nand zero zero
    s0 s1 s2 s3 c0 = carry_inc_4bit one i0 i1 i2 i3
    s4 s5 s6 s7 c1 = carry_inc_4bit c0 i4 i5 i6 i7
    s8 s9 s10 s11 ign = carry_inc_4bit c1 i8 i9 i10 i11
    o0 o1 o2 o3 = copy_4bit :4:s0
    o4 o5 o6 o7 = copy_4bit :4:s4
    o8 o9 o10 o11 = copy_4bit :4:s8

cpu_phase01:
    alias cpu_phase_0 i0
    alias cpu_pc_0 i1
    alias cpu_pc_1 i2
    alias cpu_pc_2 i3
    alias cpu_pc_3 i4
    alias cpu_pc_4 i5
    alias cpu_pc_5 i6
    alias cpu_pc_6 i7
    alias cpu_pc_7 i8
    alias cpu_pc_8 i9
    alias cpu_pc_9 i10
    alias cpu_pc_10 i11
    alias cpu_pc_11 i12
    alias mem_value_0 i13
    alias mem_value_1 i14
    alias mem_value_2 i15
    alias mem_value_3 i16
    alias mem_value_4 i17
    alias mem_value_5 i18
    alias mem_value_6 i19
    alias mem_value_7 i20
    
    one = nand zero zero
    
    # phase 0 - load instruction
    # new state - cpu_phase_X, cpu_pc_X
    # new_mem_address_X
    # next phase = 1
    alias cpu_phase_0_ph0 one
    alias cpu_phase_1_ph0 zero
    cpu_pc_0_ph0 cpu_pc_1_ph0 cpu_pc_2_ph0 cpu_pc_3_ph0 \
    cpu_pc_4_ph0 cpu_pc_5_ph0 cpu_pc_6_ph0 cpu_pc_7_ph0 \
    cpu_pc_8_ph0 cpu_pc_9_ph0 cpu_pc_10_ph0 cpu_pc_11_ph0 = inc_12bit :12:cpu_pc_0
    alias mem_address_0_ph0 cpu_pc_0
    alias mem_address_1_ph0 cpu_pc_1
    alias mem_address_2_ph0 cpu_pc_2
    alias mem_address_3_ph0 cpu_pc_3
    alias mem_address_4_ph0 cpu_pc_4
    alias mem_address_5_ph0 cpu_pc_5
    alias mem_address_6_ph0 cpu_pc_6
    alias mem_address_7_ph0 cpu_pc_7
    alias mem_address_8_ph0 cpu_pc_8
    alias mem_address_9_ph0 cpu_pc_9
    alias mem_address_10_ph0 cpu_pc_10
    alias mem_address_11_ph0 cpu_pc_11
    
    # phase 1 - load argument (optional)
    # new state - cpu_phase_X, cpu_instr_X, cpu_tmp_X, cpu_pc_X,
    
    alias cpu_instr_0_ph1 mem_value_0
    alias cpu_instr_1_ph1 mem_value_1
    alias cpu_instr_2_ph1 mem_value_2
    alias cpu_instr_3_ph1 mem_value_3
    
    cpu_instr_0_ph1_n cpu_instr_1_ph1_n cpu_instr_2_ph1_n cpu_instr_3_ph1_n = \
        not_4bit :4:cpu_instr_0_ph1
    if_rol_ror = and_3 cpu_instr_1_ph1_n cpu_instr_2_ph1_n cpu_instr_3_ph1
    if_clc_sec = and_3 :3:cpu_instr_0_ph1
    if_single_byte_instr = or if_rol_ror if_clc_sec
    
    alias cpu_phase_0_ph1 zero
    alias cpu_phase_1_ph1 one
    
    cpu_pc_0_ph1 cpu_pc_1_ph1 cpu_pc_2_ph1 cpu_pc_3_ph1 \
    cpu_pc_4_ph1 cpu_pc_5_ph1 cpu_pc_6_ph1 cpu_pc_7_ph1 = ite_8bit if_single_byte_instr \
        :8:cpu_pc_0 :8:cpu_pc_0_ph0
    cpu_pc_8_ph1 cpu_pc_9_ph1 cpu_pc_10_ph1 cpu_pc_11_ph1 = ite_4bit if_single_byte_instr \
        :4:cpu_pc_8 :4:cpu_pc_8_ph0
    
    alias mem_address_0_ph1 cpu_pc_0
    alias mem_address_1_ph1 cpu_pc_1
    alias mem_address_2_ph1 cpu_pc_2
    alias mem_address_3_ph1 cpu_pc_3
    alias mem_address_4_ph1 cpu_pc_4
    alias mem_address_5_ph1 cpu_pc_5
    alias mem_address_6_ph1 cpu_pc_6
    alias mem_address_7_ph1 cpu_pc_7
    alias mem_address_8_ph1 cpu_pc_8
    alias mem_address_9_ph1 cpu_pc_9
    alias mem_address_10_ph1 cpu_pc_10
    alias mem_address_11_ph1 cpu_pc_11
    
    # merge phase0 and phase1
    # cpu_phase_X
    o0 = ite cpu_phase_0 cpu_phase_0_ph1 cpu_phase_0_ph0
    o1 = ite cpu_phase_0 cpu_phase_1_ph1 cpu_phase_1_ph0
    # cpu_instr_X
    o2 o3 o4 o5 = copy_4bit :4:mem_value_0
    # cpu_pc_X
    o6 o7 o8 o9 o10 o11 o12 o13 = ite_8bit cpu_phase_0 :8:cpu_pc_0_ph1 :8:cpu_pc_0_ph0
    o14 o15 o16 o17 = ite_4bit cpu_phase_0 :4:cpu_pc_8_ph1 :4:cpu_pc_8_ph0
    # cpu_tmp_X
    o18 o19 o20 o21 = copy_4bit :4:mem_value_4
    # mem_address_X
    o22 o23 o24 o25 o26 o27 o28 o29 = copy_8bit :8:cpu_pc_0
    o30 o31 o32 o33 = copy_4bit :4:cpu_pc_8

cpu_phase23:
    alias cpu_phase_0 i0
    alias cpu_instr_0 i1
    alias cpu_instr_1 i2
    alias cpu_instr_2 i3
    alias cpu_instr_3 i4
    alias cpu_tmp_0 i5
    alias cpu_tmp_1 i6
    alias cpu_tmp_2 i7
    alias cpu_tmp_3 i8
    alias cpu_acc_0 i9
    alias cpu_acc_1 i10
    alias cpu_acc_2 i11
    alias cpu_acc_3 i12
    alias cpu_acc_4 i13
    alias cpu_acc_5 i14
    alias cpu_acc_6 i15
    alias cpu_acc_7 i16
    alias cpu_flag_c i17
    alias cpu_flag_z i18
    alias cpu_flag_v i19
    alias cpu_flag_n i20
    alias cpu_pc_0 i21
    alias cpu_pc_1 i22
    alias cpu_pc_2 i23
    alias cpu_pc_3 i24
    alias cpu_pc_4 i25
    alias cpu_pc_5 i26
    alias cpu_pc_6 i27
    alias cpu_pc_7 i28
    alias cpu_pc_8 i29
    alias cpu_pc_9 i30
    alias cpu_pc_10 i31
    alias cpu_pc_11 i32
    alias mem_value_0 i33
    alias mem_value_1 i34
    alias mem_value_2 i35
    alias mem_value_3 i36
    alias mem_value_4 i37
    alias mem_value_5 i38
    alias mem_value_6 i39
    alias mem_value_7 i40
    
    one = nand zero zero
    # phase 2 - load memory argument from memory
    # new state: cpu_phase_X
    # new values: mem_rw, mem_address
    
    alias cpu_phase_0_ph2 one
    alias cpu_phase_1_ph2 one
    
    alias mem_address_0_ph2 mem_value_0
    alias mem_address_1_ph2 mem_value_1
    alias mem_address_2_ph2 mem_value_2
    alias mem_address_3_ph2 mem_value_3
    alias mem_address_4_ph2 mem_value_4
    alias mem_address_5_ph2 mem_value_5
    alias mem_address_6_ph2 mem_value_6
    alias mem_address_7_ph2 mem_value_7
    
    ##
    # phase 3 - execute instruction
    # new state: cpu_phase_X, cpu_acc_X, cpu_flag_X, cpu_pc_X
    # new values: mem_value, mem_rw, mem_address, create, stop
    
    cpu_acc_0_ph3 cpu_acc_1_ph3 cpu_acc_2_ph3 cpu_acc_3_ph3 \
    cpu_acc_4_ph3 cpu_acc_5_ph3 cpu_acc_6_ph3 cpu_acc_7_ph3 \
    cpu_flag_c_ph3 cpu_flag_z_ph3 cpu_flag_v_ph3 cpu_flag_n_ph3 \
    create_ph3 stop_ph3 = cpu_exec \
        :4:cpu_instr_0 :12:cpu_acc_0 :8:mem_value_0
    
    zero = copy zero
    cpu_phase_0 = copy cpu_phase_0
    
    alias cpu_phase_0_ph3 zero
    alias cpu_phase_1_ph3 zero
    cpu_instr_0_n cpu_instr_1_n cpu_instr_2_n cpu_instr_3_n = not_4bit :4:cpu_instr_0
    # if sta
    if_sta = and_4 cpu_instr_0 :3:cpu_instr_1_n
    alias mem_rw_ph2 if_sta
    
    mem_address_8_ph2 mem_address_9_ph2 mem_address_10_ph2 mem_address_11_ph2 = \
        copy_4bit :4:cpu_tmp_0
    
    if_branch_x = xor cpu_instr_1 cpu_instr_2
    if_branch_n = nand if_branch_x cpu_instr_3
    if_branch = nand if_branch_n if_branch_n
    cpu_flag_c_n cpu_flag_z_n cpu_flag_v_n cpu_flag_n_n = not_4bit :4:cpu_flag_c
    if_bcc = and_3 cpu_instr_0_n cpu_instr_0 cpu_flag_c_n
    if_bne = and_3 cpu_instr_0 cpu_instr_0 cpu_flag_z_n
    if_bvc = and_3 cpu_instr_0_n cpu_instr_0_n cpu_flag_v_n
    if_bpl = and_3 cpu_instr_0 cpu_instr_0_n cpu_flag_n_n
    if_do_branch_x = or_4 if_bcc if_bne if_bvc if_bpl
    if_do_branch = and if_branch if_do_branch_x
    
    # if branch then skip to phase 3
    cpu_phase_0_ph2 = or if_branch_n if_sta
    cpu_phase_1_ph2 = or if_branch_n if_sta
    cpu_pc_0_ph2 cpu_pc_1_ph2 cpu_pc_2_ph2 cpu_pc_3_ph2 \
    cpu_pc_4_ph2 cpu_pc_5_ph2 cpu_pc_6_ph2 cpu_pc_7_ph2 = ite_8bit if_do_branch \
        :8:mem_address_0_ph2 :8:cpu_pc_0
    cpu_pc_8_ph2 cpu_pc_9_ph2 cpu_pc_10_ph2 cpu_pc_11_ph2 = ite_4bit if_do_branch \
        :4:mem_address_8_ph2 :4:cpu_pc_8
        
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
    cpu_acc_4 cpu_acc_5 cpu_acc_6 cpu_acc_7 = copy_8bit :8:cpu_acc_0
    
    # merge phase2 and phase3
    # cpu_phase_X
    o0 = ite cpu_phase_0 cpu_phase_0_ph3 cpu_phase_0_ph2
    o1 = ite cpu_phase_0 cpu_phase_1_ph3 cpu_phase_1_ph2
    # cpu_acc_X
    o2 o3 o4 o5 o6 o7 o8 o9 = ite_8bit cpu_phase_0 :8:cpu_acc_0_ph3 :8:cpu_acc_0
    # cpu_flag_X
    o10 o11 o12 o13 = ite_4bit cpu_phase_0 :4:cpu_flag_c_ph3 :4:cpu_flag_c
    # cpu_pc_X
    o14 o15 o16 o17 o18 o19 o20 o21 = ite_8bit cpu_phase_0 :8:cpu_pc_0 :8:cpu_pc_0_ph2
    o22 o23 o24 o25 = ite_4bit cpu_phase_0 :4:cpu_pc_8 :4:cpu_pc_8_ph2
    # mem_rw
    o26 = ite cpu_phase_0 zero mem_rw_ph2
    # mem_value_X
    o27 o28 o29 o30 o31 o32 o33 o34 = copy_8bit :8:cpu_acc_0
    # mem_address_X
    o35 o36 o37 o38 o39 o40 o41 o42 = copy_8bit :8:mem_address_0_ph2
    o43 o44 o45 o46 = copy_4bit :4:mem_address_8_ph2
    o47 = ite cpu_phase_0 create_ph3 zero
    o48 = ite cpu_phase_0 stop_ph3 zero

# cpu instruction execution
cpu_exec:
    alias cpu_instr_0 i0
    alias cpu_instr_1 i1
    alias cpu_instr_2 i2
    alias cpu_instr_3 i3
    alias cpu_acc_0 i4
    alias cpu_acc_1 i5
    alias cpu_acc_2 i6
    alias cpu_acc_3 i7
    alias cpu_acc_4 i8
    alias cpu_acc_5 i9
    alias cpu_acc_6 i10
    alias cpu_acc_7 i11
    alias cpu_flag_c i12
    alias cpu_flag_z i13
    alias cpu_flag_v i14
    alias cpu_flag_n i15
    alias mem_value_0 i16
    alias mem_value_1 i17
    alias mem_value_2 i18
    alias mem_value_3 i19
    alias mem_value_4 i20
    alias mem_value_5 i21
    alias mem_value_6 i22
    alias mem_value_7 i23
    
    cpu_acc_0_th0 cpu_acc_1_th0 cpu_acc_2_th0 cpu_acc_3_th0 \
    cpu_acc_4_th0 cpu_acc_5_th0 cpu_acc_6_th0 cpu_acc_7_th0 cpu_flag_c_th0 \
        cpu_flag_v_th0 = cpu_exec_0 :24:cpu_instr_0
    
    # 8 - ROL
    alias cpu_acc_0_t8 cpu_flag_c
    alias cpu_acc_1_t8 cpu_acc_0
    alias cpu_acc_2_t8 cpu_acc_1
    alias cpu_acc_3_t8 cpu_acc_2
    alias cpu_acc_4_t8 cpu_acc_3
    alias cpu_acc_5_t8 cpu_acc_4
    alias cpu_acc_6_t8 cpu_acc_5
    alias cpu_acc_7_t8 cpu_acc_6
    alias cpu_flag_c_t8 cpu_acc_7
    
    # 9 - ROR
    alias cpu_flag_c_t9 cpu_acc_0
    alias cpu_acc_0_t9 cpu_acc_1
    alias cpu_acc_1_t9 cpu_acc_2
    alias cpu_acc_2_t9 cpu_acc_3
    alias cpu_acc_3_t9 cpu_acc_4
    alias cpu_acc_4_t9 cpu_acc_5
    alias cpu_acc_5_t9 cpu_acc_6
    alias cpu_acc_6_t9 cpu_acc_7
    alias cpu_acc_7_t9 cpu_flag_c
    
    cpu_acc_0_t89 cpu_acc_1_t89 cpu_acc_2_t89 cpu_acc_3_t89 \
    cpu_acc_4_t89 cpu_acc_5_t89 cpu_acc_6_t89 cpu_acc_7_t89 = ite_8bit cpu_instr_0 \
        :7:cpu_acc_0_t9 cpu_acc_7_t9 cpu_acc_0_t8 :7:cpu_acc_1_t8
    cpu_flag_c_t89 = ite cpu_instr_0 cpu_flag_c_t9 cpu_flag_c_t8
    
    # E - SPC - BCC
    if_last_instr = and_3 :3:cpu_instr_1
    cpu_instr_0_n cpu_instr_1_n cpu_instr_2_n cpu_instr_3_n = not_4bit :4:cpu_instr_0
    mem_value_0_n = nand mem_value_0 mem_value_0
    
    one = nand zero zero
    if_sec = and if_last_instr cpu_instr_0
    cpu_flag_c_tcdef = ite if_sec one cpu_flag_c
    
    if_rol_ror = and cpu_instr_1_n cpu_instr_2_n
    cpu_acc_0_th1 cpu_acc_1_th1 cpu_acc_2_th1 cpu_acc_3_th1 \
    cpu_acc_4_th1 cpu_acc_5_th1 cpu_acc_6_th1 cpu_acc_7_th1 = ite_8bit if_rol_ror \
        :8:cpu_acc_0_t89 :8:cpu_acc_0
    cpu_flag_c_th1 = ite cpu_instr_2 cpu_flag_c_tcdef cpu_flag_c_t89
    cpu_acc_changed = or cpu_instr_3_n if_rol_ror
    
    cpu_acc_0_tall cpu_acc_1_tall cpu_acc_2_tall cpu_acc_3_tall \
    cpu_acc_4_tall cpu_acc_5_tall cpu_acc_6_tall cpu_acc_7_tall = ite_8bit \
        cpu_instr_3 :8:cpu_acc_0_th1 :8:cpu_acc_0_th0
    
    if_nz0 = or_4 :4:cpu_acc_0_tall
    if_nz1 = or_4 :4:cpu_acc_4_tall
    if_nz = or if_nz0 if_nz1
    if_zero = nand if_nz if_nz
    
    # cpu_acc_X
    o0 o1 o2 o3 o4 o5 o6 o7 = copy_8bit :8:cpu_acc_0_tall
    # cpu_flag_X
    o8 = ite cpu_instr_3 cpu_flag_c_th1 cpu_flag_c_th0
    o9 = ite cpu_acc_changed if_zero cpu_flag_z
    o10 = ite cpu_instr_3 cpu_flag_v cpu_flag_v_th0
    o11 = ite cpu_acc_changed cpu_acc_7_tall cpu_flag_n
    # create
    o12 = and_3 if_last_instr cpu_instr_0_n mem_value_0_n
    # stop
    o13 = and_3 if_last_instr cpu_instr_0_n mem_value_0

# cpu instruction execution
cpu_exec_0:
    alias cpu_instr_0 i0
    alias cpu_instr_1 i1
    alias cpu_instr_2 i2
    alias cpu_instr_3 i3
    alias cpu_acc_0 i4
    alias cpu_acc_1 i5
    alias cpu_acc_2 i6
    alias cpu_acc_3 i7
    alias cpu_acc_4 i8
    alias cpu_acc_5 i9
    alias cpu_acc_6 i10
    alias cpu_acc_7 i11
    alias cpu_flag_c i12
    alias cpu_flag_z i13
    alias cpu_flag_v i14
    alias cpu_flag_n i15
    alias mem_value_0 i16
    alias mem_value_1 i17
    alias mem_value_2 i18
    alias mem_value_3 i19
    alias mem_value_4 i20
    alias mem_value_5 i21
    alias mem_value_6 i22
    alias mem_value_7 i23
    
    # 0 - LDA
    alias cpu_acc_0_t0 mem_value_0
    alias cpu_acc_1_t0 mem_value_1
    alias cpu_acc_2_t0 mem_value_2
    alias cpu_acc_3_t0 mem_value_3
    alias cpu_acc_4_t0 mem_value_4
    alias cpu_acc_5_t0 mem_value_5
    alias cpu_acc_6_t0 mem_value_6
    alias cpu_acc_7_t0 mem_value_7
    
    # 1 - STA
    
    # 2 - ADC
    cpu_acc_0_t2 cpu_acc_1_t2 cpu_acc_2_t2 cpu_acc_3_t2 carry_0_t2 = carry_adder_4bit \
        cpu_flag_c :4:cpu_acc_0 :4:mem_value_0
    cpu_acc_4_t2 cpu_acc_5_t2 cpu_acc_6_t2 cpu_acc_7_t2 cpu_flag_c_t2 = carry_adder_4bit \
        carry_0_t2 :4:cpu_acc_4 :4:mem_value_4
    tmp0 = xor cpu_acc_7 mem_value_7
    tmp1 = nand tmp0 tmp0
    tmp2 = xor cpu_acc_7 cpu_acc_7_t2
    cpu_flag_v_t2 = and tmp1 tmp2
    
    # 3 - SBC
    cpu_acc_0_t3 cpu_acc_1_t3 cpu_acc_2_t3 cpu_acc_3_t3 carry_0_t3 = carry_suber_4bit \
        cpu_flag_c :4:cpu_acc_0 :4:mem_value_0
    cpu_acc_4_t3 cpu_acc_5_t3 cpu_acc_6_t3 cpu_acc_7_t3 cpu_flag_c_t3 = carry_suber_4bit \
        carry_0_t3 :4:cpu_acc_4 :4:mem_value_4
    tmp0 = xor cpu_acc_7 cpu_acc_7_t3
    tmp1 = xor cpu_acc_7 mem_value_7
    cpu_flag_v_t3 = and tmp0 tmp1
    
    cpu_acc_0_t23 cpu_acc_1_t23 cpu_acc_2_t23 cpu_acc_3_t23 \
    cpu_acc_4_t23 cpu_acc_5_t23 cpu_acc_6_t23 cpu_acc_7_t23 = ite_8bit cpu_instr_0 \
        :4:cpu_acc_0_t3 :4:cpu_acc_4_t3 :4:cpu_acc_0_t2 :4:cpu_acc_4_t2
    cpu_flag_c_t23 = ite cpu_instr_0 cpu_flag_c_t3 cpu_flag_c_t2
    cpu_flag_v_t23 = ite cpu_instr_0 cpu_flag_v_t3 cpu_flag_v_t2
    
    cpu_acc_0_t0123 cpu_acc_1_t0123 cpu_acc_2_t0123 cpu_acc_3_t0123 \
    cpu_acc_4_t0123 cpu_acc_5_t0123 cpu_acc_6_t0123 cpu_acc_7_t0123 = ite_8bit cpu_instr_1 \
        :8:cpu_acc_0_t23 :8:cpu_acc_0_t0
    cpu_flag_c_t0123 = ite cpu_instr_1 cpu_flag_c_t23 cpu_flag_c
    cpu_flag_v_t0123 = ite cpu_instr_1 cpu_flag_v_t23 cpu_flag_v
    
    # 4 - AND
    cpu_acc_0_t4 cpu_acc_1_t4 cpu_acc_2_t4 cpu_acc_3_t4 = and_4bit :4:cpu_acc_0 :4:mem_value_0
    cpu_acc_4_t4 cpu_acc_5_t4 cpu_acc_6_t4 cpu_acc_7_t4 = and_4bit :4:cpu_acc_4 :4:mem_value_4
    
    # 5 - OR
    cpu_acc_0_t5 cpu_acc_1_t5 cpu_acc_2_t5 cpu_acc_3_t5 = or_4bit :4:cpu_acc_0 :4:mem_value_0
    cpu_acc_4_t5 cpu_acc_5_t5 cpu_acc_6_t5 cpu_acc_7_t5 = or_4bit :4:cpu_acc_4 :4:mem_value_4
    
    cpu_acc_0_t45 cpu_acc_1_t45 cpu_acc_2_t45 cpu_acc_3_t45 \
    cpu_acc_4_t45 cpu_acc_5_t45 cpu_acc_6_t45 cpu_acc_7_t45 = ite_8bit cpu_instr_0 \
        :8:cpu_acc_0_t5 :8:cpu_acc_0_t4
    
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
    cpu_acc_4 cpu_acc_5 cpu_acc_6 cpu_acc_7 = copy_8bit :8:cpu_acc_0
    cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 = copy_4bit :4:cpu_instr_0
    
    cpu_flag_v = copy cpu_flag_v
    
    # 6 - XOR
    cpu_acc_0_t6 cpu_acc_1_t6 cpu_acc_2_t6 cpu_acc_3_t6 = xor_4bit :4:cpu_acc_0 :4:mem_value_0
    cpu_acc_4_t6 cpu_acc_5_t6 cpu_acc_6_t6 cpu_acc_7_t6 = xor_4bit :4:cpu_acc_4 :4:mem_value_4
    
    # 7 - CLC
    alias cpu_flag_c_t7 zero
    
    cpu_acc_0_t67 cpu_acc_1_t67 cpu_acc_2_t67 cpu_acc_3_t67 \
    cpu_acc_4_t67 cpu_acc_5_t67 cpu_acc_6_t67 cpu_acc_7_t67 = ite_8bit cpu_instr_0 \
        :8:cpu_acc_0 :8:cpu_acc_0_t6
    cpu_flag_c_t67 = ite cpu_instr_0 cpu_flag_c_t7 cpu_flag_c
    
    cpu_acc_0_t4567 cpu_acc_1_t4567 cpu_acc_2_t4567 cpu_acc_3_t4567 \
    cpu_acc_4_t4567 cpu_acc_5_t4567 cpu_acc_6_t4567 cpu_acc_7_t4567 = ite_8bit cpu_instr_1 \
        :8:cpu_acc_0_t67 :8:cpu_acc_0_t45
    cpu_flag_c_t4567 = ite cpu_instr_1 cpu_flag_c_t67 cpu_flag_c
    
    o0 o1 o2 o3 o4 o5 o6 o7 = ite_8bit cpu_instr_2 \
        :8:cpu_acc_0_t4567 :8:cpu_acc_0_t0123
    o8 = ite cpu_instr_2 cpu_flag_c_t4567 cpu_flag_c_t0123
    o9 = ite cpu_instr_2 cpu_flag_v cpu_flag_v_t0123
