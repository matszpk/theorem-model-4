# Simple 4-bit CPU
# cell_len_bits: 4, address_len: 8
# Registers:
#  A - accumlator (4-bit)
#  S - stack pointer (4-bit)
#  F - flags (3 - N, 1 - Z 0 - C)
#  PC - program counter (8-bit)
# Instruction set:
# 0 - LDA - load into accumulator
# 1 - STA - store accumulator
# 2 - ADC - add to accumulator (A + M + C)
# 3 - SBC - subtract from accumulator (A - NOT(M) +C)
# 4 - AND - perform bitwise AND on accumulator
# 5 - OR - perform bitwise OR on accumulator
# 6 - XOR - perform bitwise XOR on accumulator
# 7 - ROL - rotate left 1 bit including C.
# 8 - ROR - rotate right 1 bit including C.
# 9 - BCC - branch if C=0
# A - BNE - branch if Z=0
# B - BPL - branch if N=0
# C - JMP
# D - PSH - push
# E - PUL - pull, if SP=0 then STOP
# F - CLC
main:
    # input (state):
    alias cpu_state_0 i0
    alias cpu_state_1 i1
    alias cpu_state_2 i2
    alias cpu_instr_0 i3
    alias cpu_instr_1 i4
    alias cpu_instr_2 i5
    alias cpu_instr_3 i6
    alias cpu_pc_0 i7   # program counter
    alias cpu_pc_1 i8
    alias cpu_pc_2 i9
    alias cpu_pc_3 i10
    alias cpu_pc_4 i11
    alias cpu_pc_5 i12
    alias cpu_pc_6 i13
    alias cpu_pc_7 i14
    alias cpu_acc_0 i15
    alias cpu_acc_1 i16
    alias cpu_acc_2 i17
    alias cpu_acc_3 i18
    alias cpu_flag_c i19
    alias cpu_flag_z i20
    alias cpu_flag_n i21
    alias cpu_sp_0 i22  # stack pointer
    alias cpu_sp_1 i23
    alias cpu_sp_2 i24
    alias cpu_sp_3 i25
    alias cpu_tempreg_0 i26
    alias cpu_tempreg_1 i27
    alias cpu_tempreg_2 i28
    alias cpu_tempreg_3 i29
    alias mem_value_0 i30
    alias mem_value_1 i31
    alias mem_value_2 i32
    alias mem_value_3 i33
    
    ########
    # phase 0 - fetch instruction
    
    ########
    # phase 1 - fetch address nibble 0 only if not CLC, PSH, PUL, ROL, ROR
    # if CLC, ROL, ROR then go to phase 3.
    # if PSH, PUL then go to phase 2.
    
    ########
    # phase 2 - fetch address nibble 1 
    # only if not CLC, PSH, PUL, ROL, ROR.
    
    ########
    # phase 3 - if not JMP then load/store to memory
    # only if not CLC, PSH, PUL, ROL, ROR.
    # if JMP, BCC, BNE or BPL then store address to PC and finish instruction.
    # if STA - then store accumulator to memory and finish instruction.
    # if PSH then store accumulator to stack and increment SP and finish instruction.
    # if PUL then prepare mem_address for stack and decrement SP and go to phase 3.
    # otherwise - then load from memory (set mem_address).
    
    ########
    # phase 4 - get memory value (if needed) and execute operation.
    
    o0 = copy cpu_state_0
    o1 = copy cpu_state_1
    o2 = copy cpu_state_2
    o3 = copy cpu_instr_0
    o4 = copy cpu_instr_1
    o5 = copy cpu_instr_2
    o6 = copy cpu_instr_3
    o7 = copy cpu_pc_0
    o8 = copy cpu_pc_1
    o9 = copy cpu_pc_2
    o10 = copy cpu_pc_3
    o11 = copy cpu_pc_4
    o12 = copy cpu_pc_5
    o13 = copy cpu_pc_6
    o14 = copy cpu_pc_7
    o15 = copy cpu_acc_0
    o16 = copy cpu_acc_1
    o17 = copy cpu_acc_2
    o18 = copy cpu_acc_3
    o19 = copy cpu_flag_c
    o20 = copy cpu_flag_z
    o21 = copy cpu_flag_n
    o22 = copy cpu_sp_0
    o23 = copy cpu_sp_1
    o24 = copy cpu_sp_2
    o25 = copy cpu_sp_3
    o26 = copy cpu_tempreg_0
    o27 = copy cpu_tempreg_1
    o28 = copy cpu_tempreg_2
    o29 = copy cpu_tempreg_3
    o30 = copy mem_value_0
    o31 = copy mem_value_1
    o32 = copy mem_value_2
    o33 = copy mem_value_3
    # mem_rw
    o34 = copy zero
    # mem_address
    o35 = copy zero
    o36 = copy zero
    o37 = copy zero
    o38 = copy zero
    o39 = copy zero
    o40 = copy zero
    o41 = copy zero
    o42 = copy zero
    # create
    o43 = copy zero
    # stop
    o44 = copy zero
copy:
    t = nand i0 i0
    o0 = nand t t
xor:
    n0 = nand i0 i0
    n1 = nand i1 i1
    t0 = nand i0 n1
    t1 = nand n0 i1
    o0 = nand t0 t1
# if i0 then i1 else i2
ite:
    n0 = nand i0 i0
    t0 = nand i0 i1
    t1 = nand n0 i2
    o0 = nand t0 t1
xor_4bit:
    o0 = xor i0 i4
    o1 = xor i1 i5
    o2 = xor i2 i6
    o3 = xor i3 i7
ite_4bit:
    o0 = ite i0 i1 i5
    o1 = ite i0 i2 i6
    o2 = ite i0 i3 i7
    o3 = ite i0 i4 i8
copy_4bit:
    o0 = copy i0
    o1 = copy i1
    o2 = copy i2
    o3 = copy i3
not_4bit:
    o0 = nand i0 i0
    o1 = nand i1 i1
    o2 = nand i2 i2
    o3 = nand i3 i3
full_adder:
    alias a0 i0
    alias a1 i1
    alias a2 i2
    t0 = nand a2 a1
    t1 = nand a1 a0
    t2 = nand a0 a2
    t3 = nand t0 t1
    t4 = nand t1 a0
    t5 = nand t0 a2
    t6 = nand t2 t3
    t7 = nand t5 t4
    t8 = nand a1 t6
    t9 = nand t2 t7
    o0 = nand t8 t9
    o1 = nand t2 t6
half_adder:
    o0 o1 = full_adder i0 i1 zero
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_adder_4bit:
    s0 c0 = full_adder i1 i5 i0
    s1 c1 = full_adder i2 i6 c0
    s2 c2 = full_adder i3 i7 c1
    s3 c3 = full_adder i4 i8 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
# 4-bit subtractor with carry
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_suber_4bit:
    n0 n1 n2 n3 = not_4bit i5 i6 i7 i8
    s0 c0 = full_adder i1 n0 i0
    s1 c1 = full_adder i2 n1 c0
    s2 c2 = full_adder i3 n2 c1
    s3 c3 = full_adder i4 n3 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
# i0-i7 - 4-bit A, i8-i9 - 2-bit B
adder_8bit_2bit:
    t0 t1 t2 t3 t4 c0 = carry_adder_4bit zero i0 i1 i2 i3 i8 i9 zero zero
    t4 t5 t6 t7 t8 ign = carry_adder_4bit c0 i4 i5 i6 i7 zero zero zero zero
    o0 o1 o2 o3 = copy_4bit t0 t1 t2 t3
    o4 o5 o6 o7 = copy_4bit t4 t5 t6 t7
