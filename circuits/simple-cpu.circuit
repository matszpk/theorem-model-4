# Simple 4-bit CPU
# cell_len_bits: 4, address_len: 8
# Registers:
#  A - accumlator (4-bit)
#  S - stack pointer (4-bit)
#  F - flags (3 - N, 1 - Z 0 - C)
#  PC - program counter (8-bit)
# Instruction set:
# 0 - LDA - load into accumulator
# 1 - STA - store accumulator
# 2 - ADC - add to accumulator (A + M + C)
# 3 - SBC - subtract from accumulator (A - NOT(M) +C)
# 4 - AND - perform bitwise AND on accumulator
# 5 - OR - perform bitwise OR on accumulator
# 6 - XOR - perform bitwise XOR on accumulator
# 7 - CLC
# 8 - ROL - rotate left 1 bit including C.
# 9 - ROR - rotate right 1 bit including C.
# A - BCC - branch if C=0
# B - BNE - branch if Z=0
# C - BPL - branch if N=0
# D - JMP
# E - PSH - push
# F - PUL - pull, if SP=0 then STOP
main:
    # input (state):
    alias cpu_state_0 i0
    alias cpu_state_1 i1
    alias cpu_state_2 i2
    alias cpu_instr_0 i3
    alias cpu_instr_1 i4
    alias cpu_instr_2 i5
    alias cpu_instr_3 i6
    # program counter
    alias cpu_pc_0 i7
    alias cpu_pc_1 i8
    alias cpu_pc_2 i9
    alias cpu_pc_3 i10
    alias cpu_pc_4 i11
    alias cpu_pc_5 i12
    alias cpu_pc_6 i13
    alias cpu_pc_7 i14
    alias cpu_acc_0 i15
    alias cpu_acc_1 i16
    alias cpu_acc_2 i17
    alias cpu_acc_3 i18
    alias cpu_flag_c i19
    alias cpu_flag_z i20
    alias cpu_flag_n i21
    # stack pointer
    alias cpu_sp_0 i22
    alias cpu_sp_1 i23
    alias cpu_sp_2 i24
    alias cpu_sp_3 i25
    alias cpu_tempreg_0 i26
    alias cpu_tempreg_1 i27
    alias cpu_tempreg_2 i28
    alias cpu_tempreg_3 i29
    alias mem_value_0 i30
    alias mem_value_1 i31
    alias mem_value_2 i32
    alias mem_value_3 i33
    
    # phase 0,1,2
    cpu_state_0_ph012 cpu_state_1_ph012 cpu_state_2_ph012 cpu_instr_0_ph012 cpu_instr_1_ph012 \
    cpu_instr_2_ph012 cpu_instr_3_ph012 cpu_pc_0_ph012 cpu_pc_1_ph012 cpu_pc_2_ph012 \
    cpu_pc_3_ph012 cpu_pc_4_ph012 cpu_pc_5_ph012 cpu_pc_6_ph012 cpu_pc_7_ph012 \
    cpu_tempreg_0_ph012 cpu_tempreg_1_ph012 cpu_tempreg_2_ph012 cpu_tempreg_3_ph012 \
    mem_rw_ph012 mem_address_0_ph012 mem_address_1_ph012 mem_address_2_ph012 \
    mem_address_3_ph012 mem_address_4_ph012 mem_address_5_ph012 mem_address_6_ph012 \
    mem_address_7_ph012 = cpu_phase012 cpu_state_0 cpu_state_1 cpu_state_2 \
        cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
        cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 \
        cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # phase 3
    cpu_state_0_ph3 cpu_state_1_ph3 cpu_state_2_ph3 cpu_pc_0_ph3 cpu_pc_1_ph3 cpu_pc_2_ph3 \
    cpu_pc_3_ph3 cpu_pc_4_ph3 cpu_pc_5_ph3 cpu_pc_6_ph3 cpu_pc_7_ph3 cpu_sp_0_ph3 cpu_sp_1_ph3 \
    cpu_sp_2_ph3 cpu_sp_3_ph3 mem_rw_ph3 mem_value_0_ph3 mem_value_1_ph3 mem_value_2_ph3 \
    mem_value_3_ph3 mem_address_0_ph3 mem_address_1_ph3 mem_address_2_ph3 mem_address_3_ph3 \
    mem_address_4_ph3 mem_address_5_ph3 mem_address_6_ph3 mem_address_7_ph3 if_stop_ph012 \
    = cpu_phase3 cpu_state_0 cpu_state_1 cpu_state_2 cpu_instr_0 cpu_instr_1 cpu_instr_2 \
    cpu_instr_3 cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 \
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 cpu_flag_c cpu_flag_z cpu_flag_n \
    cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 \
    cpu_tempreg_3 mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # phase 4
    cpu_acc_0_t_all cpu_acc_1_t_all cpu_acc_2_t_all cpu_acc_3_t_all cpu_flag_c_t_all \
    cpu_flag_n_t_all cpu_flag_z_t_all = cpu_phase4 \
    cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 cpu_flag_c cpu_flag_z cpu_flag_n \
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # copy to avoid unknown
    cpu_state_2 = copy cpu_state_2
    cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 = copy_4bit \
        cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3
    cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 = copy_4bit cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3
    cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 = copy_4bit cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 = copy_4bit cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3
    cpu_flag_c = copy cpu_flag_c
    cpu_flag_z = copy cpu_flag_z
    cpu_flag_n = copy cpu_flag_n
    cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 = copy_4bit cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3
    cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 = copy_4bit \
        cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3
    mem_address_6_ph012 = copy mem_address_6_ph012
    mem_address_7_ph012 = copy mem_address_7_ph012
    
    # merge phase 3 with 0,1,2
    cpu_state_0_ph0123 cpu_state_1_ph0123 cpu_state_2_ph0123 cpu_instr_0_ph0123 \
    cpu_instr_1_ph0123 cpu_instr_2_ph0123 cpu_instr_3_ph0123 cpu_pc_0_ph0123 cpu_pc_1_ph0123 \
    cpu_pc_2_ph0123 cpu_pc_3_ph0123 cpu_pc_4_ph0123 cpu_pc_5_ph0123 cpu_pc_6_ph0123 \
    cpu_pc_7_ph0123 cpu_sp_0_ph0123 cpu_sp_1_ph0123 cpu_sp_2_ph0123 cpu_sp_3_ph0123 \
    cpu_tempreg_0_ph0123 cpu_tempreg_1_ph0123 cpu_tempreg_2_ph0123 cpu_tempreg_3_ph0123 \
    mem_rw_ph0123 mem_value_0_ph0123 mem_value_1_ph0123 mem_value_2_ph0123 mem_value_3_ph0123 \
    mem_address_0_ph0123 mem_address_1_ph0123 mem_address_2_ph0123 mem_address_3_ph0123 \
    mem_address_4_ph0123 mem_address_5_ph0123 mem_address_6_ph0123 mem_address_7_ph0123 \
    if_stop_ph0123 = cpu_merge_phase012_3 \
    cpu_state_0 cpu_state_1 cpu_state_2 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
    cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 cpu_state_0_ph012 cpu_state_1_ph012 \
    cpu_state_2_ph012 cpu_instr_0_ph012 cpu_instr_1_ph012 cpu_instr_2_ph012 cpu_instr_3_ph012 \
    cpu_pc_0_ph012 cpu_pc_1_ph012 cpu_pc_2_ph012 cpu_pc_3_ph012 cpu_pc_4_ph012 cpu_pc_5_ph012 \
    cpu_pc_6_ph012 cpu_pc_7_ph012 cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 \
    cpu_tempreg_0_ph012 cpu_tempreg_1_ph012 cpu_tempreg_2_ph012 cpu_tempreg_3_ph012 \
    cpu_state_0_ph3 cpu_state_1_ph3 cpu_state_2_ph3 cpu_pc_0_ph3 cpu_pc_1_ph3 cpu_pc_2_ph3 \
    cpu_pc_3_ph3 cpu_pc_4_ph3 cpu_pc_5_ph3 cpu_pc_6_ph3 cpu_pc_7_ph3 cpu_sp_0_ph3 cpu_sp_1_ph3 \
    cpu_sp_2_ph3 cpu_sp_3_ph3 mem_rw_ph012 mem_value_0 mem_value_1 mem_value_2 \
    mem_value_3 mem_address_0_ph012 mem_address_1_ph012 mem_address_2_ph012 \
    mem_address_3_ph012 mem_address_4_ph012 mem_address_5_ph012 mem_address_6_ph012 \
    mem_address_7_ph012 mem_rw_ph3 mem_value_0_ph3 mem_value_1_ph3 mem_value_2_ph3 \
    mem_value_3_ph3 mem_address_0_ph3 mem_address_1_ph3 mem_address_2_ph3 mem_address_3_ph3 \
    mem_address_4_ph3 mem_address_5_ph3 mem_address_6_ph3 mem_address_7_ph3 if_stop_ph012
    
    o0 o1 o2 o3 o4 o5 o6 o7 o8 o9 o10 o11 o12 o13 o14 o15 o16 o17 o18 o19 o20 o21 o22 \
    o23 o24 o25 o26 o27 o28 o29 o30 o31 o32 o33 o34 o35 o36 o37 o38 o39 o40 o41 o42 o43 o44 \
    = cpu_merge_phase0123_4 cpu_state_0_ph0123 cpu_state_1_ph0123 cpu_state_2_ph0123 \
    cpu_instr_0_ph0123 cpu_instr_1_ph0123 cpu_instr_2_ph0123 cpu_instr_3_ph0123 \
    cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 \
    cpu_pc_0_ph0123 cpu_pc_1_ph0123 cpu_pc_2_ph0123 cpu_pc_3_ph0123 cpu_pc_4_ph0123 \
    cpu_pc_5_ph0123 cpu_pc_6_ph0123 cpu_pc_7_ph0123 \
    cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
    cpu_flag_c cpu_flag_z cpu_flag_n \
    cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 \
    cpu_state_2 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
    cpu_acc_0_t_all cpu_acc_1_t_all cpu_acc_2_t_all cpu_acc_3_t_all \
    cpu_flag_c_t_all cpu_flag_z_t_all cpu_flag_n_t_all \
    cpu_sp_0_ph0123 cpu_sp_1_ph0123 cpu_sp_2_ph0123 cpu_sp_3_ph0123 \
    cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 \
    cpu_tempreg_0_ph0123 cpu_tempreg_1_ph0123 cpu_tempreg_2_ph0123 cpu_tempreg_3_ph0123 \
    mem_value_0_ph0123 mem_value_1_ph0123 mem_value_2_ph0123 mem_value_3_ph0123 \
    mem_rw_ph0123 mem_address_0_ph0123 mem_address_1_ph0123 mem_address_2_ph0123 \
    mem_address_3_ph0123 mem_address_4_ph0123 mem_address_5_ph0123 mem_address_6_ph0123 \
    mem_address_7_ph0123 if_stop_ph0123

cpu_phase012:
    # input (state):
    alias cpu_state_0 i0
    alias cpu_state_1 i1
    alias cpu_state_2 i2
    alias cpu_instr_0 i3
    alias cpu_instr_1 i4
    alias cpu_instr_2 i5
    alias cpu_instr_3 i6
    # program counter
    alias cpu_pc_0 i7
    alias cpu_pc_1 i8
    alias cpu_pc_2 i9
    alias cpu_pc_3 i10
    alias cpu_pc_4 i11
    alias cpu_pc_5 i12
    alias cpu_pc_6 i13
    alias cpu_pc_7 i14
    alias cpu_tempreg_0 i15
    alias cpu_tempreg_1 i16
    alias cpu_tempreg_2 i17
    alias cpu_tempreg_3 i18
    alias mem_value_0 i19
    alias mem_value_1 i20
    alias mem_value_2 i21
    alias mem_value_3 i22
    
    one = nand zero zero
    
    ########
    # phase 0 - fetch instruction
    
    alias mem_address_0_ph0 cpu_pc_0
    alias mem_address_1_ph0 cpu_pc_1
    alias mem_address_2_ph0 cpu_pc_2
    alias mem_address_3_ph0 cpu_pc_3
    alias mem_address_4_ph0 cpu_pc_4
    alias mem_address_5_ph0 cpu_pc_5
    alias mem_address_6_ph0 cpu_pc_6
    alias mem_address_7_ph0 cpu_pc_7
    
    alias mem_rw_ph0 zero
    
    cpu_pc_0_ph0 cpu_pc_1_ph0 cpu_pc_2_ph0 cpu_pc_3_ph0 \
        cpu_pc_4_ph0 cpu_pc_5_ph0 cpu_pc_6_ph0 cpu_pc_7_ph0 = \
        inc_8bit cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7
    
    # next cpu state
    alias cpu_state_0_ph0 one
    alias cpu_state_1_ph0 zero
    alias cpu_state_2_ph0 zero
    
    ########
    # phase 1 - fetch address nibble 0 only if not CLC, PSH, PUL, ROL, ROR
    # if CLC, ROL, ROR then go to phase 3.
    # if PSH, PUL then go to phase 2.
    
    # it doesn't matter if CLC, PSH, PUL, ROL, ROR
    alias mem_address_0_ph1 mem_address_0_ph0
    alias mem_address_1_ph1 mem_address_1_ph0
    alias mem_address_2_ph1 mem_address_2_ph0
    alias mem_address_3_ph1 mem_address_3_ph0
    alias mem_address_4_ph1 mem_address_4_ph0
    alias mem_address_5_ph1 mem_address_5_ph0
    alias mem_address_6_ph1 mem_address_6_ph0
    alias mem_address_7_ph1 mem_address_0_ph0
    
    alias mem_rw_ph1 mem_rw_ph0
    
    # move mem_value into cpu_instr_0_ph1
    alias cpu_instr_0_ph1 mem_value_0
    alias cpu_instr_1_ph1 mem_value_1
    alias cpu_instr_2_ph1 mem_value_2
    alias cpu_instr_3_ph1 mem_value_3
    
    alias mem_rw_ph0 zero
    
    # clc_rol_ror_psh_pull
    tmp0 = nand cpu_instr_2_ph1 cpu_instr_3_ph1
    tmp1 = nand cpu_instr_2_ph1 cpu_instr_0_ph1
    tmp2 = nand cpu_instr_1_ph1 cpu_instr_1_ph1
    tmp3 = nand cpu_instr_3_ph1 tmp0
    tmp4 = nand tmp0 tmp1
    tmp5 = nand tmp2 cpu_instr_1_ph1
    tmp6 = nand tmp4 cpu_instr_0_ph1
    tmp7 = nand tmp6 tmp2
    
    # next cpu state
    if_clc_rol_ror_psh_pul = nand tmp5 tmp7
    # if if_clc_rol_ror_psh_pul then state=3 else state=2
    alias cpu_state_0_ph1 if_clc_rol_ror_psh_pul
    alias cpu_state_1_ph1 one
    # still one in third bit of state
    alias cpu_state_2_ph1 cpu_state_2_ph0
    
    # increment if not CLC, ROL or ROR.
    cpu_pc_0_ph1 cpu_pc_1_ph1 cpu_pc_2_ph1 cpu_pc_3_ph1 = ite_4bit if_clc_rol_ror_psh_pul \
        cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 \
        cpu_pc_0_ph0 cpu_pc_1_ph0 cpu_pc_2_ph0 cpu_pc_3_ph0
    cpu_pc_4_ph1 cpu_pc_5_ph1 cpu_pc_6_ph1 cpu_pc_7_ph1 = ite_4bit if_clc_rol_ror_psh_pul \
        cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 \
        cpu_pc_4_ph0 cpu_pc_5_ph0 cpu_pc_6_ph0 cpu_pc_7_ph0
    
    # merge phase0 and phase1
    # mem_address and mem_rw are same
    cpu_pc_0_ph01 cpu_pc_1_ph01 cpu_pc_2_ph01 cpu_pc_3_ph01 = ite_4bit cpu_state_0 \
        cpu_pc_0_ph1 cpu_pc_1_ph1 cpu_pc_2_ph1 cpu_pc_3_ph1 \
        cpu_pc_0_ph0 cpu_pc_1_ph0 cpu_pc_2_ph0 cpu_pc_3_ph0
    cpu_pc_4_ph01 cpu_pc_5_ph01 cpu_pc_6_ph01 cpu_pc_7_ph01 = ite_4bit cpu_state_0 \
        cpu_pc_4_ph1 cpu_pc_5_ph1 cpu_pc_6_ph1 cpu_pc_7_ph1 \
        cpu_pc_4_ph0 cpu_pc_5_ph0 cpu_pc_6_ph0 cpu_pc_7_ph0
    cpu_state_0_ph01 = ite cpu_state_0 cpu_state_0_ph1 cpu_state_0_ph0
    cpu_state_1_ph01 = ite cpu_state_0 cpu_state_1_ph1 cpu_state_1_ph0
    alias cpu_state_2_ph01 cpu_state_2_ph1
    cpu_instr_0_ph01 cpu_instr_1_ph01 cpu_instr_2_ph01 cpu_instr_3_ph01 = ite_4bit \
        cpu_state_0 cpu_instr_0_ph1 cpu_instr_1_ph1 cpu_instr_2_ph1 cpu_instr_3_ph1 \
        cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3
    alias mem_rw_ph01 mem_rw_ph1
    alias mem_address_0_ph01 mem_address_0_ph1
    alias mem_address_1_ph01 mem_address_1_ph1
    alias mem_address_2_ph01 mem_address_2_ph1
    alias mem_address_3_ph01 mem_address_3_ph1
    alias mem_address_4_ph01 mem_address_4_ph1
    alias mem_address_5_ph01 mem_address_5_ph1
    alias mem_address_6_ph01 mem_address_6_ph1
    alias mem_address_7_ph01 mem_address_0_ph1
    
    ########
    # phase 2 - fetch address nibble 1 
    # only if not CLC, PSH, PUL, ROL, ROR.
    
    # move mem_value into cpu_tempreg_0 - first nibble of address argument
    alias cpu_tempreg_0_ph2 mem_value_0
    alias cpu_tempreg_1_ph2 mem_value_1
    alias cpu_tempreg_2_ph2 mem_value_2
    alias cpu_tempreg_3_ph2 mem_value_3
    
    # this same operation like in phase 1 - increment PC.
    alias cpu_pc_0_ph2 cpu_pc_0_ph0
    alias cpu_pc_1_ph2 cpu_pc_1_ph0
    alias cpu_pc_2_ph2 cpu_pc_2_ph0
    alias cpu_pc_3_ph2 cpu_pc_3_ph0
    alias cpu_pc_4_ph2 cpu_pc_4_ph0
    alias cpu_pc_5_ph2 cpu_pc_5_ph0
    alias cpu_pc_6_ph2 cpu_pc_6_ph0
    alias cpu_pc_7_ph2 cpu_pc_7_ph0
    
    alias cpu_state_0_ph2 one
    alias cpu_state_1_ph2 one
    
    # merge phase0, phase1 and phase2
    
    cpu_state_0_n = nand cpu_state_0 cpu_state_0
    cpu_state_1_n = nand cpu_state_1 cpu_state_1
    cpu_state_2_n = nand cpu_state_2 cpu_state_2
    if_phase_2 = and_3 cpu_state_0_n cpu_state_1 cpu_state_2
    if_phase_3 = and_3 cpu_state_0 cpu_state_1 cpu_state_2_n
    
    # cpu_state_0_ph012
    o0 = ite if_phase_2 cpu_state_0_ph2 cpu_state_0_ph01
    # cpu_state_1_ph012
    o1 = ite if_phase_2 cpu_state_1_ph2 cpu_state_1_ph01
    # cpu_state_2_ph012
    o2 = copy cpu_state_2_ph01
    # cpu_instr_X_ph012
    o3 o4 o5 o6 = ite_4bit if_phase_2 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
        cpu_instr_0_ph01 cpu_instr_1_ph01 cpu_instr_2_ph01 cpu_instr_3_ph01
    # cpu_pc_X_ph012
    o7 o8 o9 o10 = ite_4bit if_phase_2 cpu_pc_0_ph2 cpu_pc_1_ph2 cpu_pc_2_ph1 cpu_pc_3_ph2 \
        cpu_pc_0_ph01 cpu_pc_1_ph01 cpu_pc_2_ph01 cpu_pc_3_ph01
    # cpu_pc_X_ph012
    o11 o12 o13 o14 = ite_4bit if_phase_2 cpu_pc_4_ph2 cpu_pc_5_ph2 cpu_pc_6_ph2 cpu_pc_7_ph2 \
        cpu_pc_4_ph01 cpu_pc_5_ph01 cpu_pc_6_ph01 cpu_pc_7_ph01
    # cpu_pc_tempreg_X_ph012
    o15 o16 o17 o18 = ite_4bit if_phase_2 \
        cpu_tempreg_0_ph2 cpu_tempreg_1_ph2 cpu_tempreg_2_ph2 cpu_tempreg_3_ph2 \
        cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3
    
    # mem_rw_ph012
    o19 = copy mem_rw_ph01
    # mem_address_X_ph012
    o20 o21 o22 o23 = copy_4bit \
        mem_address_0_ph01 mem_address_1_ph01 mem_address_2_ph01 mem_address_3_ph01
    o24 o25 o26 o27 = copy_4bit \
        mem_address_4_ph01 mem_address_5_ph01 mem_address_6_ph01 mem_address_7_ph01

cpu_phase3:
    # input (state):
    alias cpu_state_0 i0
    alias cpu_state_1 i1
    alias cpu_state_2 i2
    alias cpu_instr_0 i3
    alias cpu_instr_1 i4
    alias cpu_instr_2 i5
    alias cpu_instr_3 i6
    # program counter
    alias cpu_pc_0 i7
    alias cpu_pc_1 i8
    alias cpu_pc_2 i9
    alias cpu_pc_3 i10
    alias cpu_pc_4 i11
    alias cpu_pc_5 i12
    alias cpu_pc_6 i13
    alias cpu_pc_7 i14
    alias cpu_acc_0 i15
    alias cpu_acc_1 i16
    alias cpu_acc_2 i17
    alias cpu_acc_3 i18
    alias cpu_flag_c i19
    alias cpu_flag_z i20
    alias cpu_flag_n i21
    # stack pointer
    alias cpu_sp_0 i22
    alias cpu_sp_1 i23
    alias cpu_sp_2 i24
    alias cpu_sp_3 i25
    alias cpu_tempreg_0 i26
    alias cpu_tempreg_1 i27
    alias cpu_tempreg_2 i28
    alias cpu_tempreg_3 i29
    alias mem_value_0 i30
    alias mem_value_1 i31
    alias mem_value_2 i32
    alias mem_value_3 i33
    
    ########
    # phase 3 - if not JMP then load/store to memory
    # only if not CLC, PSH, PUL, ROL, ROR.
    # if JMP, BCC, BNE or BPL then store address to PC and finish instruction.
    # if STA - then store accumulator to memory and finish instruction.
    # if PSH then store accumulator to stack and increment SP and finish instruction.
    # if PUL then prepare mem_address for stack and decrement SP and go to phase 3.
    # otherwise - then load from memory (set mem_address).
    
    tmp0 = nand cpu_instr_1 cpu_instr_1
    tmp1 = nand cpu_instr_3 cpu_instr_2
    tmp2 = nand cpu_instr_0 cpu_instr_2
    tmp3 = nand cpu_instr_3 tmp0
    tmp4 = nand tmp0 cpu_instr_0
    tmp5 = nand tmp4 tmp1
    tmp6 = nand tmp5 tmp2
    tmp7 = nand tmp3 tmp6
    tmp8 = nand tmp7 tmp3
    if_sta_psh = nand tmp8 tmp8
    alias if_not_sta_psh tmp8 
    
    cpu_instr_2_n = nand cpu_instr_2 cpu_instr_2
    cpu_instr_1_n = nand cpu_instr_1 cpu_instr_1
    cpu_instr_0_n = nand cpu_instr_0 cpu_instr_0
    if_jump = and_4 cpu_instr_0 cpu_instr_1_n cpu_instr_2 cpu_instr_3
    if_bcc_bne = and_3 cpu_instr_1 cpu_instr_2_n cpu_instr_3
    if_bpl = and_4 cpu_instr_1_n cpu_instr_1_n cpu_instr_2 cpu_instr_3
    cpu_flag_c_n = nand cpu_flag_c cpu_flag_c
    cpu_flag_z_n = nand cpu_flag_z cpu_flag_z
    cpu_flag_n_n = nand cpu_flag_n cpu_flag_n
    if_bcc_jump = and_3 if_bcc_bne cpu_instr_0_n cpu_flag_c_n
    if_bne_jump = and_3 if_bcc_bne cpu_instr_0 cpu_flag_z_n
    if_bpl_jump_tmp = nand if_bpl cpu_flag_n_n
    if_bpl_jump = nand if_bpl_jump_tmp cpu_flag_n
    
    # join it: if_bcc_jump or if_bne_jump or if_bpl_jump or if_jump
    if_jump = or_4 if_bcc_jump if_bne_jump if_bpl_jump if_jump
    
    cpu_instr_0_n = nand cpu_instr_0 cpu_instr_0
    if_psh = and_4 cpu_instr_0_n cpu_instr_1 cpu_instr_2 cpu_instr_3
    if_pul = and_4 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3
    
    if_sp_zero = and_4 cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3
    if_no_stop = nand if_sp_zero if_pul
    
    cpu_sp_0_inc cpu_sp_1_inc cpu_sp_2_inc cpu_sp_3_inc ign = carry_inc_4bit \
        zero cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3
    cpu_sp_0_dec cpu_sp_1_dec cpu_sp_2_dec cpu_sp_3_dec = dec_4bit \
        cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3
    cpu_sp_0_tmp cpu_sp_1_tmp cpu_sp_2_tmp cpu_sp_3_tmp = ite_4bit if_psh \
        cpu_sp_0_inc cpu_sp_1_inc cpu_sp_2_inc cpu_sp_3_inc \
        cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3
    
    # calculating mem_address - SP if PSH,PUL else tmpreg|(mem_value<<4)
    mem_address_0_tmp mem_address_1_tmp mem_address_2_tmp mem_address_3_tmp = ite_4bit \
        if_psh cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 \
        cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3
    
    if_psh_n = nand if_psh if_psh
    if_pul_n = nand if_pul if_pul
    if_psh_pul = nand if_psh_n if_pul_n
    
    # zero state - if PSH or STA, otherwise next is 4.
    # cpu_state_0_ph3
    o0 = copy zero
    # cpu_state_1_ph3
    o1 = copy zero
    # cpu_state_2_ph3
    o2 = copy if_not_sta_psh
    
    # cpu_pc_X_ph3
    o3 o4 o5 o6 = ite_4bit if_jump cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 \
        cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3
    o7 o8 o9 o10 = ite_4bit if_jump mem_value_0 mem_value_1 mem_value_2 mem_value_3 \
        cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7
    
    # cpu_sp_X_ph3
    o11 o12 o13 o14 = ite_4bit if_pul cpu_sp_0_dec cpu_sp_1_dec cpu_sp_2_dec cpu_sp_3_dec \
        cpu_sp_0_tmp cpu_sp_1_tmp cpu_sp_2_tmp cpu_sp_3_tmp
    
    # mem_rw_ph3
    o15 = copy if_sta_psh
    # mem_value_X_ph3
    o16 o17 o18 o19 = copy_4bit cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3
    
    # mem_address_X_ph3
    o20 o21 o22 o23 = ite_4bit if_pul cpu_sp_0_dec cpu_sp_1_dec cpu_sp_2_dec cpu_sp_3_dec \
        mem_address_0_tmp mem_address_1_tmp mem_address_2_tmp mem_address_3_tmp
    o24 o25 o26 o27 = ite_4bit if_psh_pul zero zero zero zero mem_value_0 mem_value_1 \
        mem_value_2 mem_value_3
    
    # if_stop
    o28 = nand if_no_stop if_no_stop
    
cpu_merge_phase012_3:
    alias cpu_state_0 i0
    alias cpu_state_1 i1
    alias cpu_state_2 i2
    alias cpu_instr_0 i3
    alias cpu_instr_1 i4
    alias cpu_instr_2 i5
    alias cpu_instr_3 i6
    alias cpu_tempreg_0 i7
    alias cpu_tempreg_1 i8
    alias cpu_tempreg_2 i9
    alias cpu_tempreg_3 i10
    alias cpu_state_0_ph012 i11
    alias cpu_state_1_ph012 i12
    alias cpu_state_2_ph012 i13
    alias cpu_instr_0_ph012 i14
    alias cpu_instr_1_ph012 i15
    alias cpu_instr_2_ph012 i16
    alias cpu_instr_3_ph012 i17
    alias cpu_pc_0_ph012 i18
    alias cpu_pc_1_ph012 i19
    alias cpu_pc_2_ph012 i20
    alias cpu_pc_3_ph012 i21
    alias cpu_pc_4_ph012 i22
    alias cpu_pc_5_ph012 i23
    alias cpu_pc_6_ph012 i24
    alias cpu_pc_7_ph012 i25
    alias cpu_sp_0_ph012 i26
    alias cpu_sp_1_ph012 i27
    alias cpu_sp_2_ph012 i28
    alias cpu_sp_3_ph012 i29
    alias cpu_tempreg_0_ph012 i30
    alias cpu_tempreg_1_ph012 i31
    alias cpu_tempreg_2_ph012 i32
    alias cpu_tempreg_3_ph012 i33
    alias cpu_state_0_ph3 i34
    alias cpu_state_1_ph3 i35
    alias cpu_state_2_ph3 i36
    alias cpu_pc_0_ph3 i37
    alias cpu_pc_1_ph3 i38
    alias cpu_pc_2_ph3 i39
    alias cpu_pc_3_ph3 i40
    alias cpu_pc_4_ph3 i41
    alias cpu_pc_5_ph3 i42
    alias cpu_pc_6_ph3 i43
    alias cpu_pc_7_ph3 i44
    alias cpu_sp_0_ph3 i45
    alias cpu_sp_1_ph3 i46
    alias cpu_sp_2_ph3 i47
    alias cpu_sp_3_ph3 i48
    alias mem_rw_ph012 i49
    alias mem_value_0_ph012 i50
    alias mem_value_1_ph012 i51
    alias mem_value_2_ph012 i52
    alias mem_value_3_ph012 i53
    alias mem_address_0_ph012 i54
    alias mem_address_1_ph012 i55
    alias mem_address_2_ph012 i56
    alias mem_address_3_ph012 i57
    alias mem_address_4_ph012 i58
    alias mem_address_5_ph012 i59
    alias mem_address_6_ph012 i60
    alias mem_address_7_ph012 i61
    alias mem_rw_ph3 i62
    alias mem_value_0_ph3 i63
    alias mem_value_1_ph3 i64
    alias mem_value_2_ph3 i65
    alias mem_value_3_ph3 i66
    alias mem_address_0_ph3 i67
    alias mem_address_1_ph3 i68
    alias mem_address_2_ph3 i69
    alias mem_address_3_ph3 i70
    alias mem_address_4_ph3 i71
    alias mem_address_5_ph3 i72
    alias mem_address_6_ph3 i73
    alias mem_address_7_ph3 i74
    alias if_stop_ph012 i75
    
    cpu_state_2_n = nand cpu_state_2 cpu_state_2
    if_phase_3 = and_3 cpu_state_0 cpu_state_1 cpu_state_2_n
    # merge phase0, phase1, phase2 and phase3
    # cpu_state_X_ph0123
    o0 = ite if_phase_3 cpu_state_0_ph3 cpu_state_0_ph012
    o1 = ite if_phase_3 cpu_state_1_ph3 cpu_state_1_ph012
    o2 = ite if_phase_3 cpu_state_2_ph3 cpu_state_2_ph012
    # cpu_instr_X_ph0123
    o3 o4 o5 o6 = ite_4bit if_phase_3 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
        cpu_instr_0_ph012 cpu_instr_1_ph012 cpu_instr_2_ph012 cpu_instr_3_ph012
    # cpu_pc_X_ph0123
    o7 o8 o9 o10 = ite_4bit if_phase_3 cpu_pc_0_ph3 cpu_pc_1_ph3 cpu_pc_2_ph3 cpu_pc_3_ph3 \
        cpu_pc_0_ph012 cpu_pc_1_ph012 cpu_pc_2_ph012 cpu_pc_3_ph012
    o11 o12 o13 o14 = ite_4bit if_phase_3 cpu_pc_4_ph3 cpu_pc_5_ph3 cpu_pc_6_ph3 cpu_pc_7_ph3 \
        cpu_pc_4_ph012 cpu_pc_5_ph012 cpu_pc_6_ph012 cpu_pc_7_ph012
    # cpu_sp_X_ph0123
    o15 o16 o17 o18 = ite_4bit if_phase_3 cpu_sp_0_ph3 cpu_sp_1_ph3 cpu_sp_2_ph3 cpu_sp_3_ph3 \
        cpu_sp_0_ph012 cpu_sp_1_ph012 cpu_sp_2_ph012 cpu_sp_3_ph012
    # cpu_tempreg_X_ph0123
    o19 o20 o21 o22 = ite_4bit if_phase_3 \
        cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 \
        cpu_tempreg_0_ph012 cpu_tempreg_1_ph012 cpu_tempreg_2_ph012 cpu_tempreg_3_ph012
    # mem_rw_ph0123
    o23 = ite if_phase_3 mem_rw_ph3 mem_rw_ph012
    
    # mem_value_X_ph0123
    o24 o25 o26 o27 = ite_4bit if_phase_3 \
        mem_value_0_ph3 mem_value_1_ph3 mem_value_2_ph3 mem_value_3_ph3 \
        mem_value_0_ph012 mem_value_1_ph012 mem_value_2_ph012 mem_value_3_ph012
    
    # mem_address_X_ph0123
    o28 o29 o30 o31 = ite_4bit \
        if_phase_3 mem_address_0_ph3 mem_address_1_ph3 mem_address_2_ph3 mem_address_3_ph3 \
        mem_address_0_ph012 mem_address_1_ph012 mem_address_2_ph012 mem_address_3_ph012
    o32 o33 o34 o35 = ite_4bit \
        if_phase_3 mem_address_4_ph3 mem_address_5_ph3 mem_address_6_ph3 mem_address_7_ph3 \
        mem_address_4_ph012 mem_address_5_ph012 mem_address_6_ph012 mem_address_7_ph012
    o36 = ite if_phase_3 zero if_stop_ph012

cpu_phase4:
    alias cpu_instr_0 i0
    alias cpu_instr_1 i1
    alias cpu_instr_2 i2
    alias cpu_instr_3 i3
    alias cpu_flag_c i4
    alias cpu_flag_z i5
    alias cpu_flag_n i6
    alias cpu_acc_0 i7
    alias cpu_acc_1 i8
    alias cpu_acc_2 i9
    alias cpu_acc_3 i10
    alias mem_value_0 i11
    alias mem_value_1 i12
    alias mem_value_2 i13
    alias mem_value_3 i14
    
    # 0 - LDA - load into accumulator
    # F - PUL - pull, if SP=0 then STOP
    
    alias cpu_acc_0_t0 mem_value_0
    alias cpu_acc_1_t0 mem_value_1
    alias cpu_acc_2_t0 mem_value_2
    alias cpu_acc_3_t0 mem_value_3
    alias cpu_flag_c_t0 cpu_flag_c
    
    cpu_instr_1_n = nand cpu_instr_1 cpu_instr_1
    cpu_instr_2_n = nand cpu_instr_2 cpu_instr_2
    cpu_instr_3_n = nand cpu_instr_3 cpu_instr_3
    
    if_lda = and_3 cpu_instr_1_n cpu_instr_2_n cpu_instr_3_n
    if_pul = and_3 cpu_instr_1 cpu_instr_2 cpu_instr_3
    tmp = nand if_lda if_pul
    if_lda_pul = nand tmp tmp
    
    # 1 - STA - store accumulator - done in phase 3
    
    # 2 - ADC - add to accumulator (A + M + C)
    
    cpu_acc_0_t1 cpu_acc_1_t1 cpu_acc_2_t1 cpu_acc_3_t1 cpu_flag_c_t1 = carry_adder_4bit \
        cpu_flag_c cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # 3 - SBC - subtract from accumulator (A - NOT(M) +C)
    
    cpu_acc_0_t2 cpu_acc_1_t2 cpu_acc_2_t2 cpu_acc_3_t2 cpu_flag_c_t2 = carry_suber_4bit \
        cpu_flag_c cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    cpu_acc_0_t12 cpu_acc_1_t12 cpu_acc_2_t12 cpu_acc_3_t12 = ite_4bit cpu_instr_0 \
        cpu_acc_0_t2 cpu_acc_1_t2 cpu_acc_2_t2 cpu_acc_3_t2 \
        cpu_acc_0_t1 cpu_acc_1_t1 cpu_acc_2_t1 cpu_acc_3_t1
    cpu_flag_c_t12 = ite cpu_instr_0 cpu_flag_c_t2 cpu_flag_c_t1
    
    cpu_acc_0_t012 cpu_acc_1_t012 cpu_acc_2_t012 cpu_acc_3_t012 = ite_4bit if_lda_pul \
        cpu_acc_0_t0 cpu_acc_1_t0 cpu_acc_2_t0 cpu_acc_3_t0 \
        cpu_acc_0_t12 cpu_acc_1_t12 cpu_acc_2_t12 cpu_acc_3_t12
    cpu_flag_c_t012 = ite if_lda_pul cpu_flag_c_t0 cpu_flag_c_t12
    
    # 4 - AND - perform bitwise AND on accumulator
    
    cpu_acc_0_t3 cpu_acc_1_t3 cpu_acc_2_t3 cpu_acc_3_t3 = and_4bit \
        cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # 5 - OR - perform bitwise OR on accumulator
    
    cpu_acc_0_t4 cpu_acc_1_t4 cpu_acc_2_t4 cpu_acc_3_t4 = or_4bit \
        cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    cpu_acc_0_t34 cpu_acc_1_t34 cpu_acc_2_t34 cpu_acc_3_t34 = ite_4bit cpu_instr_0 \
        cpu_acc_0_t4 cpu_acc_1_t4 cpu_acc_2_t4 cpu_acc_3_t4 \
        cpu_acc_0_t3 cpu_acc_1_t3 cpu_acc_2_t3 cpu_acc_3_t3
    
    # 6 - XOR - perform bitwise XOR on accumulator
    
    cpu_acc_0_t5 cpu_acc_1_t5 cpu_acc_2_t5 cpu_acc_3_t5 = xor_4bit \
        cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        mem_value_0 mem_value_1 mem_value_2 mem_value_3
    
    # 7 - CLC
    
    alias cpu_flag_c_tx zero
    
    cpu_acc_0_t5 cpu_acc_1_t5 cpu_acc_2_t5 cpu_acc_3_t5 = ite_4bit cpu_instr_0 \
        cpu_acc_0 cpu_acc_1 cpu_acc_2 cpu_acc_3 \
        cpu_acc_0_t5 cpu_acc_1_t5 cpu_acc_2_t5 cpu_acc_3_t5
    cpu_flag_c_5 = ite cpu_instr_0 cpu_flag_c_tx cpu_flag_c
    
    cpu_acc_0_t345 cpu_acc_1_t345 cpu_acc_2_t345 cpu_acc_3_t345 = ite_4bit cpu_instr_1 \
        cpu_acc_0_t5 cpu_acc_1_t5 cpu_acc_2_t5 cpu_acc_3_t5 \
        cpu_acc_0_t34 cpu_acc_1_t34 cpu_acc_2_t34 cpu_acc_3_t34
    
    cpu_acc_0_t012345 cpu_acc_1_t012345 cpu_acc_2_t012345 cpu_acc_3_t012345 = ite_4bit \
        cpu_instr_2 cpu_acc_0_t345 cpu_acc_1_t345 cpu_acc_2_t345 cpu_acc_3_t345 \
        cpu_acc_0_t012 cpu_acc_1_t012 cpu_acc_2_t012 cpu_acc_3_t012
    cpu_flag_c_t012345 = ite cpu_instr_2 cpu_flag_c cpu_flag_c_t012
    
    # 8 - ROL - rotate left 1 bit including C.
    
    alias cpu_acc_0_t6 cpu_flag_c
    alias cpu_acc_1_t6 cpu_acc_0
    alias cpu_acc_2_t6 cpu_acc_1
    alias cpu_acc_3_t6 cpu_acc_2
    alias cpu_flag_c_t6 cpu_acc_3
    
    # 9 - ROR - rotate right 1 bit including C.
    
    alias cpu_flag_c_t7 cpu_acc_0
    alias cpu_acc_0_t7 cpu_acc_1
    alias cpu_acc_1_t7 cpu_acc_2
    alias cpu_acc_2_t7 cpu_acc_3
    alias cpu_acc_3_t7 cpu_flag_c
    
    zero = copy zero
    
    cpu_acc_0_t67 cpu_acc_1_t67 cpu_acc_2_t67 cpu_acc_3_t67 = ite_4bit cpu_instr_0 \
        cpu_acc_0_t7 cpu_acc_1_t7 cpu_acc_2_t7 cpu_acc_3_t7 \
        cpu_acc_0_t6 cpu_acc_1_t6 cpu_acc_2_t6 cpu_acc_3_t6
    cpu_flag_c_t67 = ite cpu_instr_0 cpu_flag_c_t7 cpu_flag_c_t6
    
    # A - BCC - branch if C=0 - done in phase 3
    # B - BNE - branch if Z=0 - done in phase 3
    # C - BPL - branch if N=0 - done in phase 3
    # D - JMP - done in phase 3
    # E - PSH - push - done in phase 3
    
    if_clc = and_4 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3_n
    cpu_acc_0_n = nand cpu_acc_0 cpu_acc_0
    cpu_acc_1_n = nand cpu_acc_1 cpu_acc_1
    cpu_acc_2_n = nand cpu_acc_2 cpu_acc_2
    cpu_acc_3_n = nand cpu_acc_3 cpu_acc_3
    if_zero = and_4 cpu_acc_0_n cpu_acc_1_n cpu_acc_2_n cpu_acc_3_n
    
    # cpu_acc_0_t_all cpu_acc_1_t_all cpu_acc_2_t_all cpu_acc_3_t_all
    o0 o1 o2 o3 = ite_4bit cpu_instr_3 cpu_acc_0_t67 cpu_acc_1_t67 cpu_acc_2_t67 cpu_acc_3_t67 \
        cpu_acc_0_t012345 cpu_acc_1_t012345 cpu_acc_2_t012345 cpu_acc_3_t012345
    o4 = ite cpu_instr_3 cpu_flag_c_t67 cpu_flag_c_t012345
    
    # cpu_flag_n_t_all
    o5 = ite if_clc cpu_flag_z if_zero
    # cpu_flag_z_t_all
    o6 = ite if_clc cpu_flag_n cpu_acc_3

cpu_merge_phase0123_4:
    alias cpu_state_0_ph0123 i0
    alias cpu_state_1_ph0123 i1
    alias cpu_state_2_ph0123 i2
    alias cpu_instr_0_ph0123 i3
    alias cpu_instr_1_ph0123 i4
    alias cpu_instr_2_ph0123 i5
    alias cpu_instr_3_ph0123 i6
    alias cpu_pc_0 i7
    alias cpu_pc_1 i8
    alias cpu_pc_2 i9
    alias cpu_pc_3 i10
    alias cpu_pc_4 i11
    alias cpu_pc_5 i12
    alias cpu_pc_6 i13
    alias cpu_pc_7 i14
    alias cpu_pc_0_ph0123 i15
    alias cpu_pc_1_ph0123 i16
    alias cpu_pc_2_ph0123 i17
    alias cpu_pc_3_ph0123 i18
    alias cpu_pc_4_ph0123 i19
    alias cpu_pc_5_ph0123 i20
    alias cpu_pc_6_ph0123 i21
    alias cpu_pc_7_ph0123 i22
    alias cpu_acc_0_ph0123 i23
    alias cpu_acc_1_ph0123 i24
    alias cpu_acc_2_ph0123 i25
    alias cpu_acc_3_ph0123 i26
    alias cpu_flag_c_ph0123 i27
    alias cpu_flag_z_ph0123 i28
    alias cpu_flag_n_ph0123 i29
    alias cpu_sp_0 i30
    alias cpu_sp_1 i31
    alias cpu_sp_2 i32
    alias cpu_sp_3 i33
    alias cpu_state_2 i34
    alias cpu_instr_0 i35
    alias cpu_instr_1 i36
    alias cpu_instr_2 i37
    alias cpu_instr_3 i38
    alias cpu_acc_0_t_all i39
    alias cpu_acc_1_t_all i40
    alias cpu_acc_2_t_all i41
    alias cpu_acc_3_t_all i42
    alias cpu_flag_c_t_all i43
    alias cpu_flag_z_t_all i44
    alias cpu_flag_n_t_all i45
    alias cpu_sp_0_ph0123 i46
    alias cpu_sp_1_ph0123 i47
    alias cpu_sp_2_ph0123 i48
    alias cpu_sp_3_ph0123 i49
    alias cpu_tempreg_0 i50
    alias cpu_tempreg_1 i51
    alias cpu_tempreg_2 i52
    alias cpu_tempreg_3 i53
    alias cpu_tempreg_0_ph0123 i54
    alias cpu_tempreg_1_ph0123 i55
    alias cpu_tempreg_2_ph0123 i56
    alias cpu_tempreg_3_ph0123 i57
    alias mem_value_0_ph0123 i58
    alias mem_value_1_ph0123 i59
    alias mem_value_2_ph0123 i60
    alias mem_value_3_ph0123 i61
    alias mem_rw_ph0123 i62
    alias mem_address_0_ph0123 i63
    alias mem_address_1_ph0123 i64
    alias mem_address_2_ph0123 i65
    alias mem_address_3_ph0123 i66
    alias mem_address_4_ph0123 i67
    alias mem_address_5_ph0123 i68
    alias mem_address_6_ph0123 i69
    alias mem_address_7_ph0123 i70
    alias if_stop_ph0123 i71
    
    if_phase4_n = nand cpu_state_2 cpu_state_2
    if_phase4 = nand if_phase4_n if_phase4_n
    
    # cpu_state_X
    o0 = ite if_phase4 zero cpu_state_0_ph0123
    o1 = ite if_phase4 zero cpu_state_1_ph0123
    o2 = ite if_phase4 zero cpu_state_2_ph0123
    # cpu_instr_X
    o3 o4 o5 o6 = ite_4bit if_phase4 cpu_instr_0 cpu_instr_1 cpu_instr_2 cpu_instr_3 \
        cpu_instr_0_ph0123 cpu_instr_1_ph0123 cpu_instr_2_ph0123 cpu_instr_3_ph0123
    # cpu_pc_X
    o7 o8 o9 o10 = ite_4bit if_phase4 cpu_pc_0 cpu_pc_1 cpu_pc_2 cpu_pc_3 \
        cpu_pc_0_ph0123 cpu_pc_1_ph0123 cpu_pc_2_ph0123 cpu_pc_3_ph0123
    o11 o12 o13 o14 = ite_4bit if_phase4 cpu_pc_4 cpu_pc_5 cpu_pc_6 cpu_pc_7 \
        cpu_pc_4_ph0123 cpu_pc_5_ph0123 cpu_pc_6_ph0123 cpu_pc_7_ph0123
    # cpu_acc_X
    o15 o16 o17 o18 = ite_4bit if_phase4 cpu_acc_0_t_all cpu_acc_1_t_all \
        cpu_acc_2_t_all cpu_acc_3_t_all \
        cpu_acc_0_ph0123 cpu_acc_1_ph0123 cpu_acc_2_ph0123 cpu_acc_3_ph0123
    # cpu_flag_X
    o19 = ite if_phase4 cpu_flag_c_t_all cpu_flag_c_ph0123
    o20 = ite if_phase4 cpu_flag_z_t_all cpu_flag_z_ph0123
    o21 = ite if_phase4 cpu_flag_n_t_all cpu_flag_n_ph0123
    # cpu_sp_X
    o22 o23 o24 o25 = ite_4bit if_phase4 cpu_sp_0 cpu_sp_1 cpu_sp_2 cpu_sp_3 \
        cpu_sp_0_ph0123 cpu_sp_1_ph0123 cpu_sp_2_ph0123 cpu_sp_3_ph0123
    # cpu_tempreg_X
    o26 o27 o28 o29 = ite_4bit if_phase4 cpu_tempreg_0 cpu_tempreg_1 cpu_tempreg_2 cpu_tempreg_3 \
        cpu_tempreg_0_ph0123 cpu_tempreg_1_ph0123 cpu_tempreg_2_ph0123 cpu_tempreg_3_ph0123
    # mem_value_X
    o30 o31 o32 o33 = ite_4bit if_phase4 zero zero zero zero \
        mem_value_0_ph0123 mem_value_1_ph0123 mem_value_2_ph0123 mem_value_3_ph0123
    # mem_rw
    o34 = ite if_phase4 zero mem_rw_ph0123
    # mem_address
    o35 o36 o37 o38 = ite_4bit if_phase4 zero zero zero zero \
        mem_address_0_ph0123 mem_address_1_ph0123 mem_address_2_ph0123 mem_address_3_ph0123
    o39 o40 o41 o42 = ite_4bit if_phase4 zero zero zero zero \
        mem_address_4_ph0123 mem_address_5_ph0123 mem_address_6_ph0123 mem_address_7_ph0123
    o43 = copy zero
    o44 = ite if_phase4 zero if_stop_ph0123
    
copy:
    t = nand i0 i0
    o0 = nand t t
xor:
    n0 = nand i0 i0
    n1 = nand i1 i1
    t0 = nand i0 n1
    t1 = nand n0 i1
    o0 = nand t0 t1
and_4bit:
    t0 = nand i0 i4
    t1 = nand i1 i5
    t2 = nand i2 i6
    t3 = nand i3 i7
    o0 = nand t0 t0
    o1 = nand t1 t1
    o2 = nand t2 t2
    o3 = nand t3 t3
or:
    t0 = nand i0 i0
    t1 = nand i1 i1
    o0 = nand t0 t1
or_4bit:
    o0 = or i0 i4
    o1 = or i1 i5
    o2 = or i2 i6
    o3 = or i3 i7
and_3:
    t0 = nand i0 i1
    t0 = nand t0 t0
    t1 = nand i2 t0
    o0 = nand t1 t1
and_4:
    t0 = nand i0 i1
    t0 = nand t0 t0
    t1 = nand i2 i3
    t1 = nand t1 t1
    t2 = nand t0 t1
    o0 = nand t2 t2
or_4:
    t0 = nand i0 i0
    t1 = nand i1 i1
    t2 = nand i2 i2
    t3 = nand i3 i3
    t4 = nand t1 t3
    t5 = nand i2 i0
    t6 = nand t4 t4
    t7 = nand i3 t5
    o0 = nand t6 t7
# if i0 then i1 else i2
ite:
    n0 = nand i0 i0
    t0 = nand i0 i1
    t1 = nand n0 i2
    o0 = nand t0 t1
xor_4bit:
    o0 = xor i0 i4
    o1 = xor i1 i5
    o2 = xor i2 i6
    o3 = xor i3 i7
ite_4bit:
    o0 = ite i0 i1 i5
    o1 = ite i0 i2 i6
    o2 = ite i0 i3 i7
    o3 = ite i0 i4 i8
copy_4bit:
    o0 = copy i0
    o1 = copy i1
    o2 = copy i2
    o3 = copy i3
not_4bit:
    o0 = nand i0 i0
    o1 = nand i1 i1
    o2 = nand i2 i2
    o3 = nand i3 i3
full_adder:
    t0 = nand i1 i2
    t1 = nand t0 i1
    t2 = nand i2 t0
    t3 = nand t2 t1
    t4 = nand t3 i0
    t5 = nand i0 t4
    t6 = nand t4 t3
    o0 = nand t5 t6
    o1 = nand t0 t4
half_adder:
    t0 = nand i0 i1
    t2 = nand i0 t0
    t3 = nand t0 i1
    o0 = nand t2 t3
    o1 = nand t0 t0
half_suber:
    t0 = nand i1 i1
    t1 = nand i0 i0
    t1 = nand t0 t1
    t0 = nand i1 i0
    t2 = nand t1 t1
    o0 = nand t0 t1
    o1 = nand t2 t2
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_adder_4bit:
    s0 c0 = full_adder i1 i5 i0
    s1 c1 = full_adder i2 i6 c0
    s2 c2 = full_adder i3 i7 c1
    s3 c3 = full_adder i4 i8 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
# 4-bit subtractor with carry
# i0 - carry, i1-i4 - 4-bit A, i5-i8 - 4-bit B
carry_suber_4bit:
    n0 n1 n2 n3 = not_4bit i5 i6 i7 i8
    s0 c0 = full_adder i1 n0 i0
    s1 c1 = full_adder i2 n1 c0
    s2 c2 = full_adder i3 n2 c1
    s3 c3 = full_adder i4 n3 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
carry_inc_4bit:
    s0 c0 = half_adder i1 i0
    s1 c1 = half_adder i2 c0
    s2 c2 = half_adder i3 c1
    s3 c3 = half_adder i4 c2
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 = copy c3
dec_4bit:
    d0 c0 = half_suber i0 zero
    d1 c1 = half_suber i1 c0
    d2 c2 = half_suber i2 c1
    d3 c3 = half_suber i3 c2
    o0 o1 o2 o3 = copy_4bit d0 d1 d2 d3
inc_8bit:
    one = nand zero zero
    s0 s1 s2 s3 c0 = carry_inc_4bit one i0 i1 i2 i3
    s4 s5 s6 s7 ign = carry_inc_4bit c0 i4 i5 i6 i7
    o0 o1 o2 o3 = copy_4bit s0 s1 s2 s3
    o4 o5 o6 o7 = copy_4bit s4 s5 s6 s7
